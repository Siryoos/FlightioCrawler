# ==============================================================================
# FlightIO Optimized Makefile
# Features: Advanced build targets, caching, parallel execution, CI/CD ready
# ==============================================================================

.PHONY: help install format lint type-check test clean setup-dev run-tests run-mypy run-flake8 run-black run-isort build-optimized build-frontend build-all docker-build-optimized docker-push docker-cleanup performance-test security-scan dependency-check

# Configuration
PYTHON := python3
PIP := pip3
NODE := node
NPM := npm
DOCKER := docker
DOCKER_COMPOSE := docker-compose
REGISTRY := ghcr.io/flightio
TAG := $(shell git describe --tags --always 2>/dev/null || echo 'latest')
PARALLEL_JOBS := $(shell nproc)

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
PURPLE := \033[0;35m
CYAN := \033[0;36m
NC := \033[0m # No Color

# Default target
help:
	@echo -e "${BLUE}FlightIO Optimized Build System${NC}"
	@echo "======================================"
	@echo ""
	@echo -e "${CYAN}Core Commands:${NC}"
	@echo "  install           Install all dependencies"
	@echo "  setup-dev         Setup development environment"
	@echo "  build-optimized   Build optimized Docker images"
	@echo "  build-frontend    Build optimized frontend"
	@echo "  build-all         Build all components"
	@echo ""
	@echo -e "${CYAN}Quality Commands:${NC}"
	@echo "  format            Format code with black and isort"
	@echo "  lint              Run all linting tools"
	@echo "  type-check        Run mypy type checking"
	@echo "  test              Run all tests with coverage"
	@echo "  security-scan     Run security scans"
	@echo ""
	@echo -e "${CYAN}Docker Commands:${NC}"
	@echo "  docker-build-optimized  Build optimized Docker images"
	@echo "  docker-push             Push images to registry"
	@echo "  docker-cleanup          Cleanup Docker resources"
	@echo ""
	@echo -e "${CYAN}Performance Commands:${NC}"
	@echo "  performance-test   Run performance benchmarks"
	@echo "  dependency-check   Check for dependency updates"
	@echo "  clean              Clean temporary files"
	@echo ""
	@echo -e "${CYAN}Environment Variables:${NC}"
	@echo "  TAG=${TAG}"
	@echo "  REGISTRY=${REGISTRY}"
	@echo "  PARALLEL_JOBS=${PARALLEL_JOBS}"

# ==============================================================================
# INSTALLATION TARGETS
# ==============================================================================

# Install dependencies with optimizations
install:
	@echo -e "${BLUE}Installing dependencies with optimizations...${NC}"
	$(PIP) install --upgrade pip setuptools wheel
	$(PIP) install --no-cache-dir -r requirements.txt
	@echo -e "${GREEN}Dependencies installed successfully!${NC}"

# Setup development environment with Poetry
setup-dev:
	@echo -e "${BLUE}Setting up development environment...${NC}"
	$(PIP) install --upgrade pip poetry
	poetry install --with dev
	@echo -e "${GREEN}Development environment setup complete!${NC}"

# Install frontend dependencies
install-frontend:
	@echo -e "${BLUE}Installing frontend dependencies...${NC}"
	cd frontend && $(NPM) ci --cache=/tmp/npm-cache
	@echo -e "${GREEN}Frontend dependencies installed!${NC}"

# ==============================================================================
# BUILD TARGETS
# ==============================================================================

# Build optimized Docker images
build-optimized:
	@echo -e "${BLUE}Building optimized Docker images...${NC}"
	@chmod +x scripts/build-optimized-v2.sh
	./scripts/build-optimized-v2.sh
	@echo -e "${GREEN}Optimized builds completed!${NC}"

# Build frontend with optimizations
build-frontend:
	@echo -e "${BLUE}Building optimized frontend...${NC}"
	cd frontend && $(NPM) run build
	@echo -e "${GREEN}Frontend build completed!${NC}"

# Build all components
build-all: install install-frontend build-frontend build-optimized
	@echo -e "${GREEN}All components built successfully!${NC}"

# Docker build with optimizations
docker-build-optimized:
	@echo -e "${BLUE}Building Docker images with optimizations...${NC}"
	$(DOCKER) buildx build \
		--file Dockerfile.optimized \
		--target production \
		--tag $(REGISTRY)/api:$(TAG) \
		--tag $(REGISTRY)/api:latest \
		--platform linux/amd64,linux/arm64 \
		--cache-from type=gha,scope=flightio \
		--cache-to type=gha,mode=max,scope=flightio \
		--push \
		.
	@echo -e "${GREEN}Docker build completed!${NC}"

# Push images to registry
docker-push:
	@echo -e "${BLUE}Pushing images to registry...${NC}"
	$(DOCKER) push $(REGISTRY)/api:$(TAG)
	$(DOCKER) push $(REGISTRY)/api:latest
	@echo -e "${GREEN}Images pushed successfully!${NC}"

# ==============================================================================
# QUALITY TARGETS
# ==============================================================================

# Format code with optimizations
format: run-black run-isort
	@echo -e "${GREEN}Code formatting complete!${NC}"

# Run black formatter with optimizations
run-black:
	@echo -e "${BLUE}Running black formatter...${NC}"
	$(PYTHON) -m black . --line-length=88 --quiet

# Run isort import sorter with optimizations
run-isort:
	@echo -e "${BLUE}Running isort import sorter...${NC}"
	$(PYTHON) -m isort . --profile=black --line-length=88 --quiet

# Run flake8 linter with optimizations
run-flake8:
	@echo -e "${BLUE}Running flake8 linter...${NC}"
	$(PYTHON) -m flake8 --max-line-length=88 --extend-ignore=E203,W503,E722,F401 --max-complexity=15 --statistics .

# Run mypy type checker with optimizations
run-mypy:
	@echo -e "${BLUE}Running mypy type checker...${NC}"
	$(PYTHON) -m mypy --config-file=mypy.ini --show-error-codes --pretty .

# Run all linting tools in parallel
lint: run-flake8 run-mypy
	@echo -e "${GREEN}Linting complete!${NC}"

# Type checking
type-check: run-mypy

# Run tests with optimizations
run-tests:
	@echo -e "${BLUE}Running tests with optimizations...${NC}"
	$(PYTHON) -m pytest tests/ \
		--tb=short \
		--cov=. \
		--cov-report=term-missing \
		--cov-report=html \
		--cov-report=xml \
		--junitxml=test-results.xml \
		--durations=10 \
		--maxfail=5

# Run all tests
test: run-tests

# ==============================================================================
# SECURITY TARGETS
# ==============================================================================

# Security scan with bandit
security-scan:
	@echo -e "${BLUE}Running security scans...${NC}"
	$(PYTHON) -m bandit -r . -f json -o bandit-report.json || true
	$(PYTHON) -m safety check --json --output safety-report.json || true
	@echo -e "${GREEN}Security scan complete! Check reports for results.${NC}"

# Check for vulnerabilities in dependencies
safety:
	@echo -e "${BLUE}Checking dependencies for vulnerabilities...${NC}"
	$(PYTHON) -m safety check --json --output safety-report.json || true
	@echo -e "${GREEN}Safety check complete!${NC}"

# ==============================================================================
# PERFORMANCE TARGETS
# ==============================================================================

# Performance testing
performance-test:
	@echo -e "${BLUE}Running performance tests...${NC}"
	$(PYTHON) scripts/performance_benchmark.py
	@echo -e "${GREEN}Performance tests completed!${NC}"

# Memory profiling
memory-profile:
	@echo -e "${BLUE}Running memory profiling...${NC}"
	$(PYTHON) scripts/memory_benchmark_suite.py
	@echo -e "${GREEN}Memory profiling completed!${NC}"

# ==============================================================================
# DEPENDENCY TARGETS
# ==============================================================================

# Check dependencies for updates
dependency-check:
	@echo -e "${BLUE}Checking for dependency updates...${NC}"
	$(PIP) list --outdated
	cd frontend && $(NPM) outdated || true
	@echo -e "${GREEN}Dependency check complete!${NC}"

# Update dependencies
update-deps:
	@echo -e "${BLUE}Updating dependencies...${NC}"
	$(PIP) install --upgrade -r requirements.txt
	cd frontend && $(NPM) update
	@echo -e "${GREEN}Dependencies updated!${NC}"

# ==============================================================================
# CLEANUP TARGETS
# ==============================================================================

# Clean temporary files with optimizations
clean:
	@echo -e "${BLUE}Cleaning temporary files...${NC}"
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name ".coverage" -delete 2>/dev/null || true
	find . -type f -name "*.log" -delete 2>/dev/null || true
	rm -rf htmlcov/ 2>/dev/null || true
	rm -rf .pytest_cache/ 2>/dev/null || true
	rm -rf .mypy_cache/ 2>/dev/null || true
	rm -rf frontend/.next/ 2>/dev/null || true
	rm -rf frontend/node_modules/ 2>/dev/null || true
	@echo -e "${GREEN}Cleanup complete!${NC}"

# Docker cleanup
docker-cleanup:
	@echo -e "${BLUE}Cleaning up Docker resources...${NC}"
	$(DOCKER) system prune -f --filter until=24h
	$(DOCKER) builder prune -f --filter until=168h
	@echo -e "${GREEN}Docker cleanup complete!${NC}"

# ==============================================================================
# DEVELOPMENT TARGETS
# ==============================================================================

# Start development server
dev-server:
	@echo -e "${BLUE}Starting development server...${NC}"
	$(PYTHON) -m uvicorn main:app --reload --host 0.0.0.0 --port 8000

# Start production server
prod-server:
	@echo -e "${BLUE}Starting production server...${NC}"
	$(PYTHON) -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

# Start frontend development server
dev-frontend:
	@echo -e "${BLUE}Starting frontend development server...${NC}"
	cd frontend && $(NPM) run dev

# ==============================================================================
# DATABASE TARGETS
# ==============================================================================

# Database migrations
migrate:
	@echo -e "${BLUE}Running database migrations...${NC}"
	$(PYTHON) -m alembic upgrade head

# Create new migration
migration:
	@echo -e "${BLUE}Creating new migration...${NC}"
	@read -p "Enter migration message: " msg; \
	$(PYTHON) -m alembic revision --autogenerate -m "$$msg"

# Backup database
backup-db:
	@echo -e "${BLUE}Creating database backup...${NC}"
	pg_dump -h localhost -U crawler flight_data > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo -e "${GREEN}Database backup created!${NC}"

# ==============================================================================
# CI/CD TARGETS
# ==============================================================================

# Full development setup from scratch
setup-full: setup-dev format lint test
	@echo -e "${GREEN}Full development setup complete!${NC}"

# Quick check before commit
pre-commit: format lint test security-scan
	@echo -e "${GREEN}Pre-commit checks passed! Ready to commit.${NC}"

# CI/CD simulation
ci: format lint type-check security-scan test
	@echo -e "${GREEN}CI/CD simulation complete!${NC}"

# ==============================================================================
# MONITORING TARGETS
# ==============================================================================

# Show project status
status:
	@echo -e "${BLUE}=== Project Status ===${NC}"
	@echo "Python version: $(shell $(PYTHON) --version)"
	@echo "Pip version: $(shell $(PIP) --version)"
	@echo "Node version: $(shell $(NODE) --version)"
	@echo "NPM version: $(shell $(NPM) --version)"
	@echo "Working directory: $(shell pwd)"
	@echo "Git status:"
	@git status --short 2>/dev/null || echo "Not a git repository"
	@echo ""
	@echo -e "${BLUE}=== Recent test results ===${NC}"
	@$(PYTHON) -m pytest tests/ --tb=no -q 2>/dev/null || echo "No tests run yet"

# ==============================================================================
# UTILITY TARGETS
# ==============================================================================

# Profile application
profile:
	@echo -e "${BLUE}Running performance profiling...${NC}"
	$(PYTHON) -m cProfile -o profile.stats main_crawler.py
	@echo -e "${GREEN}Profile saved to profile.stats${NC}"

# Generate documentation
docs:
	@echo -e "${BLUE}Building documentation...${NC}"
	cd docs && make html
	@echo -e "${GREEN}Documentation built in docs/_build/html/${NC}"

# Run all quality checks
quality: format lint security-scan test
	@echo -e "${GREEN}All quality checks complete!${NC}"

# ==============================================================================
# HELPER FUNCTIONS
# ==============================================================================

# Function to check if command exists
check-command = $(if $(shell command -v $(1) 2> /dev/null),$(1),$(error $(1) is not installed))

# Ensure required tools are available
check-tools:
	@$(call check-command,$(PYTHON))
	@$(call check-command,$(PIP))
	@$(call check-command,$(DOCKER))
	@$(call check-command,$(DOCKER_COMPOSE))
	@echo -e "${GREEN}All required tools are available!${NC}" 