version: '3.8'

services:
  # API Service for Testing
  api-test:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-api-test
    command: python -m uvicorn main_v2:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DB_HOST=postgres-test
      - DB_NAME=flight_data_test
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - DB_PORT=5432
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/flight_data_test
      - REDIS_URL=redis://redis-test:6379/0
      - LOG_LEVEL=DEBUG
      - DEBUG_MODE=true
      - ENVIRONMENT=test
      - USE_MOCK=true
      - TESTING=true
      - PYTEST_RUNNING=true
    ports:
      - "8000:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - /app/__pycache__
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Test Database - Lightweight and fast
  postgres-test:
    image: postgres:15-alpine
    container_name: flightio-postgres-test
    environment:
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_DB=flight_data_test
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./tests/fixtures/test_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d flight_data_test"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Test Redis - In-memory only
  redis-test:
    image: redis:7.2-alpine
    container_name: flightio-redis-test
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    command: redis-server --save "" --appendonly no --maxmemory 64mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s

  # Test Runner Service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-test-runner
    command: tail -f /dev/null  # Keep container running
    environment:
      - DB_HOST=postgres-test
      - DB_NAME=flight_data_test
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/flight_data_test
      - REDIS_URL=redis://redis-test:6379/0
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=test
      - USE_MOCK=true
      - TESTING=true
      - COVERAGE_PROCESS_START=.coveragerc
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - ./tests:/app/tests:rw
      - ./coverage-reports:/app/coverage-reports:rw
    working_dir: /app
    profiles:
      - testing

  # Integration Test Service
  integration-test:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-integration-test
    command: python -m pytest tests/integration/ -v --tb=short
    environment:
      - DB_HOST=postgres-test
      - DB_NAME=flight_data_test
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis-test
      - API_BASE_URL=http://api-test:8000
      - ENVIRONMENT=test
      - USE_MOCK=true
      - TESTING=true
    depends_on:
      api-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - ./tests:/app/tests:rw
      - ./test-results:/app/test-results:rw
    profiles:
      - integration

  # Performance Test Service
  performance-test:
    image: loadimpact/k6:latest
    container_name: flightio-performance-test
    command: run --vus 5 --duration 30s /scripts/performance-test.js
    environment:
      - API_BASE_URL=http://api-test:8000
    volumes:
      - ./tests/performance:/scripts:ro
      - ./test-results:/results:rw
    depends_on:
      api-test:
        condition: service_healthy
    profiles:
      - performance

  # Security Test Service
  security-test:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-security-test
    command: python -m pytest tests/security/ -v --tb=short
    environment:
      - API_BASE_URL=http://api-test:8000
      - ENVIRONMENT=test
      - SECURITY_TESTING=true
    depends_on:
      api-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - ./tests:/app/tests:rw
      - ./security-reports:/app/security-reports:rw
    profiles:
      - security

  # Mock External Services
  mock-services:
    image: wiremock/wiremock:latest
    container_name: flightio-mock-services
    command: --global-response-templating --verbose
    ports:
      - "8080:8080"
    volumes:
      - ./tests/mocks/wiremock:/home/wiremock:rw
    profiles:
      - mocks

  # Test Database Admin (for debugging)
  pgadmin-test:
    image: dpage/pgadmin4:latest
    container_name: flightio-pgadmin-test
    environment:
      - PGADMIN_DEFAULT_EMAIL=test@flightio.local
      - PGADMIN_DEFAULT_PASSWORD=test
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5051:80"
    depends_on:
      - postgres-test
    volumes:
      - pgadmin_test_data:/var/lib/pgadmin
    profiles:
      - debug

  # Test Coverage Report Generator
  coverage-report:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-coverage-report
    command: python -m coverage html --directory /app/coverage-reports/html
    environment:
      - COVERAGE_PROCESS_START=.coveragerc
    volumes:
      - .:/app:rw
      - ./coverage-reports:/app/coverage-reports:rw
    profiles:
      - coverage

# Test-specific networks
networks:
  default:
    driver: bridge
    name: flightio-test

volumes:
  postgres_test_data:
    driver: local
  pgadmin_test_data:
    driver: local

# Custom test configurations
x-test-environment: &test-environment
  ENVIRONMENT: test
  USE_MOCK: "true"
  TESTING: "true"
  LOG_LEVEL: DEBUG
  PYTEST_RUNNING: "true"

x-test-healthcheck: &test-healthcheck
  interval: 10s
  timeout: 5s
  retries: 3
  start_period: 10s 