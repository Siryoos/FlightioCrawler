version: '3.8'

services:
  # API Service for Development
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-api-dev
    command: python -m uvicorn main_v2:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    volumes:
      - .:/app:rw
      - /app/__pycache__
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data_dev
      - DB_USER=crawler_dev
      - DB_PASSWORD=dev_password
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://crawler_dev:dev_password@postgres:5432/flight_data_dev
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
      - DEBUG_MODE=true
      - ENVIRONMENT=development
      - ENABLE_CORS=true
      - RELOAD=true
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Crawler Service for Development  
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    container_name: flightio-crawler-dev
    command: python main_crawler.py --dev-mode
    volumes:
      - .:/app:rw
      - /app/__pycache__
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data_dev
      - DB_USER=crawler_dev
      - DB_PASSWORD=dev_password
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://crawler_dev:dev_password@postgres:5432/flight_data_dev
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
      - CRAWLER_TIMEOUT=120
      - CRAWLER_CONCURRENCY=1
      - CRAWLER_RETRY_ATTEMPTS=1
      - ENVIRONMENT=development
      - USE_MOCK=true
    depends_on:
      - redis
      - postgres
      - api
    restart: unless-stopped

  # Frontend Service for Development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flightio-frontend-dev
    command: npm run dev
    volumes:
      - ./frontend:/app:rw
      - /app/node_modules
      - /app/.next
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
      - NODE_ENV=development
      - FAST_REFRESH=true
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - api
    restart: unless-stopped

  # Redis for Development
  redis:
    image: redis:7.2-alpine
    container_name: flightio-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly no --save "" --maxmemory 64mb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # PostgreSQL for Development
  postgres:
    image: postgres:15-alpine
    container_name: flightio-postgres-dev
    environment:
      - POSTGRES_USER=crawler_dev
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=flight_data_dev
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped

  # Development Tools Container
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-dev-tools
    command: tail -f /dev/null
    volumes:
      - .:/app:rw
    environment:
      - DATABASE_URL=postgresql://crawler_dev:dev_password@postgres:5432/flight_data_dev
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    profiles:
      - tools

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: flightio-pgadmin-dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@flightio.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres
    profiles:
      - admin

  # Redis Admin (RedisInsight) 
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: flightio-redis-insight-dev
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    profiles:
      - admin

# Networks
networks:
  default:
    driver: bridge
    name: flightio-dev

volumes:
  redis_dev_data:
    driver: local
  postgres_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local
  redis_insight_data:
    driver: local 