# ==============================================================================
# FlightIO Crawler - Unified Docker Compose Configuration
# Supports: development, staging, production, testing environments
# ==============================================================================

# Usage:
# Development:   docker-compose --profile dev up
# Staging:       docker-compose --profile staging up
# Production:    docker-compose --profile production up
# Testing:       docker-compose --profile testing up
# All:           docker-compose --profile dev --profile staging --profile production --profile testing up

networks:
  flightio-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    internal: true
  database-network:
    driver: bridge
    internal: true

volumes:
  # Production volumes with bind mounts
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  storage_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/storage
  
  # Development/Staging volumes (Docker managed)
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  pgadmin_dev_data:
    driver: local
  redis_insight_data:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

services:
  # ==============================================================================
  # DATABASE LAYER
  # ==============================================================================
  
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: flightio-postgres
    environment:
      - POSTGRES_USER=crawler
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=flight_data
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    secrets:
      - db_password
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./init_simple.sql:/docker-entrypoint-initdb.d/init_simple.sql:ro
      - ./populate_platforms.sql:/docker-entrypoint-initdb.d/populate_platforms.sql:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - database-network
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crawler -d flight_data"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: >
      postgres
      -c shared_buffers=512MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=200
      -c log_statement=all
      -c log_min_duration_statement=1000
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    profiles:
      - production

  # PostgreSQL Database - Development
  postgres-dev:
    image: postgres:15-alpine
    container_name: flightio-postgres-dev
    environment:
      - POSTGRES_USER=crawler_dev
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=flight_data_dev
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    profiles:
      - dev

  # PostgreSQL Database - Staging
  postgres-staging:
    image: postgres:15-alpine
    container_name: flightio-postgres-staging
    environment:
      - POSTGRES_USER=crawler_staging
      - POSTGRES_PASSWORD=${STAGING_DB_PASSWORD:-staging_password}
      - POSTGRES_DB=flight_data_staging
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    profiles:
      - staging

  # PostgreSQL Database - Testing
  postgres-test:
    image: postgres:15-alpine
    container_name: flightio-postgres-test
    environment:
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_DB=flight_data_test
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./tests/fixtures/test_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d flight_data_test"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    profiles:
      - testing

  # Redis Cache - Production
  redis:
    image: redis:7.2-alpine
    container_name: flightio-redis
    command: >
      redis-server
      --requirepass-file /run/secrets/redis_password
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    secrets:
      - redis_password
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flightio-network
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    profiles:
      - production

  # Redis Cache - Development
  redis-dev:
    image: redis:7.2-alpine
    container_name: flightio-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly no --save "" --maxmemory 64mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    profiles:
      - dev

  # Redis Cache - Staging
  redis-staging:
    image: redis:7.2-alpine
    container_name: flightio-redis-staging
    ports:
      - "6379:6379"
    volumes:
      - redis_staging_data:/data
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    profiles:
      - staging

  # Redis Cache - Testing
  redis-test:
    image: redis:7.2-alpine
    container_name: flightio-redis-test
    ports:
      - "6380:6379"
    command: redis-server --save "" --appendonly no --maxmemory 64mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 5s
    profiles:
      - testing

  # ==============================================================================
  # APPLICATION LAYER
  # ==============================================================================

  # API Service - Production
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-api
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - REDIS_DB=0
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - DATABASE_URL=postgresql://crawler@postgres:5432/flight_data
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - DEBUG_MODE=false
      - ENVIRONMENT=production
      - SECURITY_HEADERS=true
      - RATE_LIMITING=true
      - CORS_ORIGINS=https://flightio.com,https://app.flightio.com
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WORKERS=4
      - TIMEOUT=60
      - KEEP_ALIVE=2
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=50
      - PRELOAD_APP=true
      - ACCESS_LOG=true
      - ERROR_LOG=true
      - USE_MOCK=false
      - MONITORING_ENABLED=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_PORT=8080
      - PROMETHEUS_ENABLED=true
      - GRAFANA_ENABLED=true
    secrets:
      - db_password
      - redis_password
      - secret_key
      - jwt_secret
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs_data:/app/logs:rw
      - storage_data:/app/data/storage:rw
      - ./config:/app/config:ro
    networks:
      - flightio-network
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: >
      uvicorn main:app 
      --host 0.0.0.0 
      --port 8000 
      --workers 4 
      --timeout-keep-alive 2 
      --access-log 
      --loop uvloop 
      --http httptools
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    profiles:
      - production

  # API Service - Development
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-api-dev
    command: python -m uvicorn main_v2:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    volumes:
      - .:/app:rw
      - /app/__pycache__
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres-dev
      - DB_NAME=flight_data_dev
      - DB_USER=crawler_dev
      - DB_PASSWORD=dev_password
      - DB_PORT=5432
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://crawler_dev:dev_password@postgres-dev:5432/flight_data_dev
      - REDIS_URL=redis://redis-dev:6379/0
      - LOG_LEVEL=DEBUG
      - DEBUG_MODE=true
      - ENVIRONMENT=development
      - ENABLE_CORS=true
      - RELOAD=true
    depends_on:
      - redis-dev
      - postgres-dev
    restart: unless-stopped
    profiles:
      - dev

  # API Service - Staging
  api-staging:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-api-staging
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres-staging
      - DB_NAME=flight_data_staging
      - DB_USER=crawler_staging
      - DB_PASSWORD=${STAGING_DB_PASSWORD:-staging_password}
      - DB_PORT=5432
      - REDIS_HOST=redis-staging
      - REDIS_PORT=6379
      - REDIS_DB=1
      - DATABASE_URL=postgresql://crawler_staging:${STAGING_DB_PASSWORD:-staging_password}@postgres-staging:5432/flight_data_staging
      - REDIS_URL=redis://redis-staging:6379/1
      - LOG_LEVEL=DEBUG
      - DEBUG_MODE=true
      - ENVIRONMENT=staging
      - ENABLE_CORS=true
    depends_on:
      - redis-staging
      - postgres-staging
    volumes:
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-staging.rule=Host(`api-staging.flightio.local`)"
    profiles:
      - staging

  # API Service - Testing
  api-test:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-api-test
    command: python -m uvicorn main_v2:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DB_HOST=postgres-test
      - DB_NAME=flight_data_test
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - DB_PORT=5432
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/flight_data_test
      - REDIS_URL=redis://redis-test:6379/0
      - LOG_LEVEL=DEBUG
      - DEBUG_MODE=true
      - ENVIRONMENT=test
      - USE_MOCK=true
      - TESTING=true
      - PYTEST_RUNNING=true
    ports:
      - "8000:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - /app/__pycache__
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    profiles:
      - testing

  # Crawler Service - Production
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    container_name: flightio-crawler
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - REDIS_DB=0
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - DATABASE_URL=postgresql://crawler@postgres:5432/flight_data
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - CRAWLER_TIMEOUT=30
      - CRAWLER_CONCURRENCY=3
      - CRAWLER_RETRY_ATTEMPTS=3
      - ENVIRONMENT=production
      - SECURITY_MODE=true
      - BROWSER_SANDBOX=false
      - BROWSER_HEADLESS=true
      - BROWSER_DISABLE_GPU=true
      - BROWSER_NO_SHIM=true
      - BROWSER_DISABLE_DEV_SHM=true
      - USE_MOCK=false
      - RATE_LIMIT_ENABLED=true
      - CIRCUIT_BREAKER_ENABLED=true
      - MONITORING_ENABLED=true
      - MEMORY_MONITORING_ENABLED=true
    secrets:
      - db_password
      - redis_password
      - secret_key
    ports:
      - "127.0.0.1:8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - logs_data:/app/logs:rw
      - storage_data:/app/data/storage:rw
      - ./screenshots:/app/screenshots:rw
      - ./requests:/app/requests:rw
      - ./config:/app/config:ro
    networks:
      - flightio-network
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 30s
      retries: 2
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_ADMIN
    tmpfs:
      - /tmp
      - /app/tmp
    profiles:
      - production

  # Crawler Service - Development
  crawler-dev:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    container_name: flightio-crawler-dev
    command: python main_crawler.py --dev-mode
    volumes:
      - .:/app:rw
      - /app/__pycache__
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres-dev
      - DB_NAME=flight_data_dev
      - DB_USER=crawler_dev
      - DB_PASSWORD=dev_password
      - DB_PORT=5432
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://crawler_dev:dev_password@postgres-dev:5432/flight_data_dev
      - REDIS_URL=redis://redis-dev:6379/0
      - LOG_LEVEL=DEBUG
      - CRAWLER_TIMEOUT=120
      - CRAWLER_CONCURRENCY=1
      - CRAWLER_RETRY_ATTEMPTS=1
      - ENVIRONMENT=development
      - USE_MOCK=true
    depends_on:
      - redis-dev
      - postgres-dev
      - api-dev
    restart: unless-stopped
    profiles:
      - dev

  # Crawler Service - Staging
  crawler-staging:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    container_name: flightio-crawler-staging
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres-staging
      - DB_NAME=flight_data_staging
      - DB_USER=crawler_staging
      - DB_PASSWORD=${STAGING_DB_PASSWORD:-staging_password}
      - DB_PORT=5432
      - REDIS_HOST=redis-staging
      - REDIS_PORT=6379
      - REDIS_DB=1
      - DATABASE_URL=postgresql://crawler_staging:${STAGING_DB_PASSWORD:-staging_password}@postgres-staging:5432/flight_data_staging
      - REDIS_URL=redis://redis-staging:6379/1
      - LOG_LEVEL=DEBUG
      - CRAWLER_TIMEOUT=60
      - CRAWLER_CONCURRENCY=2
      - CRAWLER_RETRY_ATTEMPTS=2
      - ENVIRONMENT=staging
      - USE_MOCK=false
    depends_on:
      - redis-staging
      - postgres-staging
      - api-staging
    volumes:
      - ./logs:/app/logs:rw
      - ./data/storage:/app/data/storage:rw
      - ./requests:/app/requests:rw
    restart: unless-stopped
    profiles:
      - staging

  # Frontend Service - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flightio-frontend
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
      - NODE_ENV=production
      - CSP_ENABLED=true
      - SECURE_HEADERS=true
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "127.0.0.1:3001:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    profiles:
      - production

  # Frontend Service - Development
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flightio-frontend-dev
    command: npm run dev
    volumes:
      - ./frontend:/app:rw
      - /app/node_modules
      - /app/.next
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
      - NODE_ENV=development
      - FAST_REFRESH=true
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - api-dev
    restart: unless-stopped
    profiles:
      - dev

  # Frontend Service - Staging
  frontend-staging:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flightio-frontend-staging
    command: npm run dev
    environment:
      - NEXT_PUBLIC_API_BASE=http://api-staging.flightio.local:8000
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app:rw
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-staging
    restart: unless-stopped
    profiles:
      - staging

  # ==============================================================================
  # BACKGROUND WORKERS
  # ==============================================================================

  # Background Worker Service - Production
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: flightio-worker
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - REDIS_DB=1
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    secrets:
      - db_password
      - redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs_data:/app/logs:rw
      - storage_data:/app/data/storage:rw
    networks:
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping", "-A", "tasks"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    profiles:
      - production

  # ML Processing Worker - Production
  ml-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: flightio-ml-worker
    command: ["celery", "worker", "-A", "tasks", "--loglevel=info", "--queues=ml_tasks", "--concurrency=1"]
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - REDIS_DB=2
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    secrets:
      - db_password
      - redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs_data:/app/logs:rw
      - storage_data:/app/data:rw
    networks:
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping", "-A", "tasks"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    profiles:
      - production

  # ==============================================================================
  # MONITORING LAYER
  # ==============================================================================

  # Enhanced Monitoring Service - Production
  monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: flightio-monitor
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - MONITORING_PORT=9090
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
    secrets:
      - db_password
      - redis_password
    ports:
      - "127.0.0.1:9090:9090"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - logs_data:/app/logs:rw
      - ./monitoring:/app/monitoring:ro
      - ./config:/app/config:ro
    networks:
      - flightio-network
      - monitoring-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    profiles:
      - production

  # Prometheus - Production
  prometheus:
    image: prom/prometheus:latest
    container_name: flightio-prometheus
    ports:
      - "127.0.0.1:9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
    networks:
      - monitoring-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    profiles:
      - production

  # Grafana - Production
  grafana:
    image: grafana/grafana:latest
    container_name: flightio-grafana
    ports:
      - "127.0.0.1:3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/db_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    secrets:
      - db_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana_dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/lib/grafana/plugins
      - /var/log/grafana
    profiles:
      - production

  # ==============================================================================
  # REVERSE PROXY LAYER
  # ==============================================================================

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: flightio-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
    depends_on:
      - api
      - frontend
    networks:
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    profiles:
      - production

  # ==============================================================================
  # DEVELOPMENT TOOLS
  # ==============================================================================

  # Development Tools Container
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-dev-tools
    command: tail -f /dev/null
    volumes:
      - .:/app:rw
    environment:
      - DATABASE_URL=postgresql://crawler_dev:dev_password@postgres-dev:5432/flight_data_dev
      - REDIS_URL=redis://redis-dev:6379/0
    depends_on:
      - postgres-dev
      - redis-dev
    profiles:
      - dev
      - tools

  # Database Admin (pgAdmin) - Development
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: flightio-pgadmin-dev
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@flightio.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres-dev
    profiles:
      - dev
      - admin

  # Redis Admin (RedisInsight) - Development
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: flightio-redis-insight-dev
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis-dev
    profiles:
      - dev
      - admin

  # ==============================================================================
  # TESTING SERVICES
  # ==============================================================================

  # Test Runner Service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-test-runner
    command: tail -f /dev/null
    environment:
      - DB_HOST=postgres-test
      - DB_NAME=flight_data_test
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis-test
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/flight_data_test
      - REDIS_URL=redis://redis-test:6379/0
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=test
      - USE_MOCK=true
      - TESTING=true
      - COVERAGE_PROCESS_START=.coveragerc
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - ./tests:/app/tests:rw
      - ./coverage-reports:/app/coverage-reports:rw
    working_dir: /app
    profiles:
      - testing

  # Integration Test Service
  integration-test:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-integration-test
    command: python -m pytest tests/integration/ -v --tb=short
    environment:
      - DB_HOST=postgres-test
      - DB_NAME=flight_data_test
      - DB_USER=test_user
      - DB_PASSWORD=test_password
      - REDIS_HOST=redis-test
      - API_BASE_URL=http://api-test:8000
      - ENVIRONMENT=test
      - USE_MOCK=true
      - TESTING=true
    depends_on:
      api-test:
        condition: service_healthy
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - ./tests:/app/tests:rw
      - ./test-results:/app/test-results:rw
    profiles:
      - testing
      - integration

  # Performance Test Service
  performance-test:
    image: loadimpact/k6:latest
    container_name: flightio-performance-test
    command: run --vus 5 --duration 30s /scripts/performance-test.js
    environment:
      - API_BASE_URL=http://api-test:8000
    volumes:
      - ./tests/performance:/scripts:ro
      - ./test-results:/results:rw
    depends_on:
      api-test:
        condition: service_healthy
    profiles:
      - testing
      - performance

  # Security Test Service
  security-test:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-security-test
    command: python -m pytest tests/security/ -v --tb=short
    environment:
      - API_BASE_URL=http://api-test:8000
      - ENVIRONMENT=test
      - SECURITY_TESTING=true
    depends_on:
      api-test:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - ./tests:/app/tests:rw
      - ./security-reports:/app/security-reports:rw
    profiles:
      - testing
      - security

  # Mock External Services
  mock-services:
    image: wiremock/wiremock:latest
    container_name: flightio-mock-services
    command: --global-response-templating --verbose
    ports:
      - "8080:8080"
    volumes:
      - ./tests/mocks/wiremock:/home/wiremock:rw
    profiles:
      - testing
      - mocks

  # Test Database Admin (for debugging)
  pgadmin-test:
    image: dpage/pgadmin4:latest
    container_name: flightio-pgadmin-test
    environment:
      - PGADMIN_DEFAULT_EMAIL=test@flightio.local
      - PGADMIN_DEFAULT_PASSWORD=test
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5051:80"
    depends_on:
      - postgres-test
    volumes:
      - pgadmin_test_data:/var/lib/pgadmin
    profiles:
      - testing
      - debug

  # Test Coverage Report Generator
  coverage-report:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-coverage-report
    command: python -m coverage html --directory /app/coverage-reports/html
    environment:
      - COVERAGE_PROCESS_START=.coveragerc
    volumes:
      - .:/app:rw
      - ./coverage-reports:/app/coverage-reports:rw
    profiles:
      - testing
      - coverage