version: '3.8'

services:
  # API Service - Lightweight container for API endpoints
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: flightio-api
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD=secure_password
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://crawler:secure_password@postgres:5432/flight_data
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - DEBUG_MODE=false
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Crawler Service - Heavy container with browser capabilities
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    container_name: flightio-crawler
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD=secure_password
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://crawler:secure_password@postgres:5432/flight_data
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - CRAWLER_TIMEOUT=30
      - CRAWLER_CONCURRENCY=3
      - CRAWLER_RETRY_ATTEMPTS=3
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ./data/storage:/app/data/storage:rw
      - ./requests:/app/requests:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=10)"] 
      interval: 60s
      timeout: 30s
      retries: 2
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: flightio-frontend
    environment:
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
      - NODE_ENV=production
    ports:
      - "3001:3000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: flightio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flightio-postgres
    environment:
      - POSTGRES_USER=crawler
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_DB=flight_data
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crawler -d flight_data"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M

  # Monitoring Service - Dedicated monitoring container
  monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: flightio-monitor
    ports:
      - "9090:9090"
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD=secure_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - MONITORING_PORT=9090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ./monitoring:/app/monitoring:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Background Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: flightio-worker
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD=secure_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=1
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ./data/storage:/app/data/storage:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping", "-A", "tasks"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # ML Processing Worker (specialized worker)
  ml-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: flightio-ml-worker
    command: ["celery", "worker", "-A", "tasks", "--loglevel=info", "--queues=ml_tasks", "--concurrency=1"]
    environment:
      - DB_HOST=postgres
      - DB_NAME=flight_data
      - DB_USER=crawler
      - DB_PASSWORD=secure_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=2
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping", "-A", "tasks"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

# Network configuration
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local 