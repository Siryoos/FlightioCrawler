# ==============================================================================
# FlightIO Optimized Multi-Stage Dockerfile
# Features: Advanced caching, security hardening, performance optimization
# ==============================================================================

# Stage 0: Base image with common dependencies
FROM python:3.11-slim as base

# Set environment variables for optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONHASHSEED=random \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    git \
    curl \
    wget \
    ca-certificates \
    fonts-noto \
    fonts-noto-cjk \
    fonts-noto-color-emoji \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Stage 1: Dependency builder with advanced caching
FROM base as builder

WORKDIR /app

# Copy dependency files first for better layer caching
COPY requirements*.txt pyproject.toml poetry.lock* ./

# Install Python dependencies with optimizations
RUN python -m pip install --upgrade pip setuptools wheel \
    && pip install --no-cache-dir --user \
        --constraint requirements.txt \
        -r requirements.txt \
    && playwright install chromium --with-deps

# Stage 2: Application builder
FROM base as app-builder

WORKDIR /app

# Copy installed packages from builder
COPY --from=builder /root/.local /root/.local

# Copy application code in optimized order
COPY --chown=1000:1000 config/ ./config/
COPY --chown=1000:1000 data/statics/ ./data/statics/
COPY --chown=1000:1000 *.py ./
COPY --chown=1000:1000 adapters/ ./adapters/
COPY --chown=1000:1000 api/ ./api/
COPY --chown=1000:1000 crawlers/ ./crawlers/
COPY --chown=1000:1000 utils/ ./utils/
COPY --chown=1000:1000 monitoring/ ./monitoring/

# Create required directories
RUN mkdir -p logs data/storage requests/pages models \
    && chmod -R 755 /app

# Stage 3: Production runtime
FROM python:3.11-slim as production

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    chromium \
    chromium-driver \
    postgresql-client \
    ca-certificates \
    fonts-noto \
    fonts-noto-cjk \
    fonts-noto-color-emoji \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Create non-root user with specific UID/GID
RUN groupadd -r flightio -g 1000 && \
    useradd -r -g flightio -u 1000 -d /app flightio

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    CRAWL4AI_BROWSER_PATH=/usr/bin/chromium \
    PYTHONPATH=/app \
    PATH="/home/flightio/.local/bin:$PATH"

WORKDIR /app

# Copy installed packages and application
COPY --from=app-builder /root/.local /home/flightio/.local
COPY --from=app-builder --chown=flightio:flightio /app /app

# Set proper permissions
RUN chown -R flightio:flightio /app \
    && chmod -R 755 /app

# Switch to non-root user
USER flightio

# Expose port
EXPOSE 8000

# Health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/system/health || exit 1

# Default command with optimized settings
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--log-level", "info"]

# Stage 4: Development runtime (optional)
FROM production as development

USER root

# Install development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    nano \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
RUN pip install --no-cache-dir \
    black \
    isort \
    flake8 \
    mypy \
    pytest \
    pytest-cov

USER flightio

# Development command with auto-reload
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"] 
