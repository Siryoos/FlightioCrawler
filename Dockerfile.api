# Secure and Optimized API Dockerfile
ARG BASE_IMAGE=python:3.11-slim
FROM ${BASE_IMAGE} AS base
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONHASHSEED=random \
    PYTHONIOENCODING=utf-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Security labels
LABEL maintainer="flightio-team" \
      version="2.0.0" \
      description="Secure FlightIO API Service" \
      security.scan="enabled"

# ---

# Build stage with security updates
FROM base AS builder

# Install security updates and build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    pkg-config \
    libffi-dev \
    libssl-dev \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /app

# Copy and install Python dependencies using extras file
COPY requirements.txt api-extras.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip setuptools wheel \
    && pip install --user --timeout=1000 --retries=5 -r api-extras.txt

# ---

# Runtime stage with security hardening
FROM ${BASE_IMAGE} AS runtime

# Install security updates and minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    curl \
    ca-certificates \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/* \
    && find /usr/share/doc -depth -type f ! -name copyright | xargs rm || true \
    && find /usr/share/man -type f | xargs rm || true

# Create secure API user with restricted permissions
RUN groupadd --system --gid 1000 apiuser \
    && useradd --system --uid 1000 --gid apiuser --no-create-home --shell /bin/false apiuser

# Security hardening - only set permissions on files that exist
RUN chmod 755 /usr/bin/find \
    && chmod 755 /usr/bin/ls \
    && chmod 755 /usr/bin/id \
    && (chmod 755 /usr/bin/ps 2>/dev/null || true)

ENV PYTHONPATH=/app \
    PATH="/home/apiuser/.local/bin:$PATH" \
    HOME=/home/apiuser

WORKDIR /app

# Copy packages from builder with proper permissions
COPY --from=builder --chown=apiuser:apiuser /root/.local /home/apiuser/.local

# Copy API-specific code with security focus
COPY --chown=apiuser:apiuser api/ ./api/
COPY --chown=apiuser:apiuser utils/ ./utils/
COPY --chown=apiuser:apiuser config/ ./config/
COPY --chown=apiuser:apiuser data/statics/ ./data/statics/
COPY --chown=apiuser:apiuser security/ ./security/
COPY --chown=apiuser:apiuser monitoring/ ./monitoring/
COPY --chown=apiuser:apiuser main.py ./
COPY --chown=apiuser:apiuser data_manager.py ./
COPY --chown=apiuser:apiuser enhanced_monitoring.py ./

# Create directories with proper permissions
RUN mkdir -p logs data/storage tmp \
    && chown -R apiuser:apiuser /app \
    && chmod -R 750 /app \
    && chmod -R 755 /app/logs \
    && chmod -R 755 /app/data \
    && chmod 700 /app/tmp \
    && chmod 600 /app/config/*.json 2>/dev/null || true

# Create non-root home directory
RUN mkdir -p /home/apiuser \
    && chown -R apiuser:apiuser /home/apiuser \
    && chmod 700 /home/apiuser

# Switch to non-root user
USER apiuser

EXPOSE 8000

# Enhanced security-focused health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f --max-time 8 --retry 2 --retry-delay 1 http://localhost:8000/api/v1/health/ready || exit 1

# Security signal handling
STOPSIGNAL SIGTERM

# Secure startup command with process monitoring
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2", "--access-log", "--proxy-headers", "--forwarded-allow-ips", "*"] 
