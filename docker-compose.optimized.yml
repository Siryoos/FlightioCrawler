# ==============================================================================
# FlightIO Optimized Docker Compose Configuration
# Features: Advanced caching, resource optimization, build performance
# ==============================================================================

version: '3.8'

networks:
  flightio-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    internal: true
  database-network:
    driver: bridge
    internal: true

volumes:
  # Optimized production volumes with bind mounts
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  storage_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/storage
  
  # Build cache volumes
  build_cache:
    driver: local
  npm_cache:
    driver: local
  pip_cache:
    driver: local

secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  secret_key:
    file: ./secrets/secret_key.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

services:
  # ==============================================================================
  # OPTIMIZED API SERVICE
  # ==============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: production
      cache_from:
        - type=gha,scope=flightio-api
        - type=registry,ref=ghcr.io/flightio/api:cache
      cache_to:
        - type=gha,mode=max,scope=flightio-api
      args:
        BUILDKIT_INLINE_CACHE: 1
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    image: ghcr.io/flightio/api:${TAG:-latest}
    container_name: flightio-api
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
      - CRAWL4AI_BROWSER_PATH=/usr/bin/chromium
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - logs_data:/app/logs
      - storage_data:/app/data/storage
      - build_cache:/tmp/build-cache
    networks:
      - flightio-network
      - database-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    profiles:
      - production

  # ==============================================================================
  # OPTIMIZED CRAWLER SERVICE
  # ==============================================================================
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: production
      cache_from:
        - type=gha,scope=flightio-crawler
        - type=registry,ref=ghcr.io/flightio/crawler:cache
      cache_to:
        - type=gha,mode=max,scope=flightio-crawler
      args:
        BUILDKIT_INLINE_CACHE: 1
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    image: ghcr.io/flightio/crawler:${TAG:-latest}
    container_name: flightio-crawler
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
      - CRAWL4AI_BROWSER_PATH=/usr/bin/chromium
    volumes:
      - logs_data:/app/logs
      - storage_data:/app/data/storage
      - build_cache:/tmp/build-cache
    networks:
      - flightio-network
      - database-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    profiles:
      - production

  # ==============================================================================
  # OPTIMIZED FRONTEND SERVICE
  # ==============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.optimized
      target: runner
      cache_from:
        - type=gha,scope=flightio-frontend
        - type=registry,ref=ghcr.io/flightio/frontend:cache
      cache_to:
        - type=gha,mode=max,scope=flightio-frontend
      args:
        BUILDKIT_INLINE_CACHE: 1
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    image: ghcr.io/flightio/frontend:${TAG:-latest}
    container_name: flightio-frontend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_API_BASE=http://api:8000
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - npm_cache:/root/.npm
    networks:
      - flightio-network
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    profiles:
      - production

  # ==============================================================================
  # OPTIMIZED DATABASE SERVICES
  # ==============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: flightio-postgres
    environment:
      - POSTGRES_USER=crawler
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=flight_data
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    secrets:
      - db_password
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./init_simple.sql:/docker-entrypoint-initdb.d/init_simple.sql:ro
      - ./populate_platforms.sql:/docker-entrypoint-initdb.d/populate_platforms.sql:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - database-network
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crawler -d flight_data"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    profiles:
      - production

  redis:
    image: redis:7-alpine
    container_name: flightio-redis
    command: redis-server --requirepass /run/secrets/redis_password --maxmemory 512mb --maxmemory-policy allkeys-lru
    secrets:
      - redis_password
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - database-network
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    profiles:
      - production

  # ==============================================================================
  # MONITORING SERVICES (OPTIMIZED)
  # ==============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: flightio-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - monitoring-network
      - flightio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    profiles:
      - production
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: flightio-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana_dashboards/:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-provisioning.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
    networks:
      - monitoring-network
      - flightio-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    profiles:
      - production
      - monitoring

  # ==============================================================================
  # DEVELOPMENT SERVICES (OPTIMIZED)
  # ==============================================================================
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: development
      cache_from:
        - type=gha,scope=flightio-api-dev
      cache_to:
        - type=gha,mode=max,scope=flightio-api-dev
    image: flightio-api-dev:latest
    container_name: flightio-api-dev
    environment:
      - NODE_ENV=development
      - PYTHONPATH=/app
      - CRAWL4AI_BROWSER_PATH=/usr/bin/chromium
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - logs_data:/app/logs
      - storage_data:/app/data/storage
      - pip_cache:/root/.cache/pip
    networks:
      - flightio-network
    depends_on:
      - postgres-dev
      - redis-dev
    restart: unless-stopped
    profiles:
      - dev

  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.optimized
      target: development
      cache_from:
        - type=gha,scope=flightio-frontend-dev
      cache_to:
        - type=gha,mode=max,scope=flightio-frontend-dev
    image: flightio-frontend-dev:latest
    container_name: flightio-frontend-dev
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - npm_cache:/root/.npm
    networks:
      - flightio-network
    restart: unless-stopped
    profiles:
      - dev

  postgres-dev:
    image: postgres:15-alpine
    container_name: flightio-postgres-dev
    environment:
      - POSTGRES_USER=crawler_dev
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=flight_data_dev
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    profiles:
      - dev

  redis-dev:
    image: redis:7-alpine
    container_name: flightio-redis-dev
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - flightio-network
    restart: unless-stopped
    profiles:
      - dev 