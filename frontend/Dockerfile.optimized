# ==============================================================================
# FlightIO Frontend Optimized Multi-Stage Dockerfile
# Features: Advanced caching, tree shaking, performance optimization
# ==============================================================================

# Stage 0: Base Node.js image
FROM node:18-alpine AS base

# Set environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    NPM_CONFIG_CACHE=/tmp/npm-cache

# Install dependencies for native modules
RUN apk add --no-cache libc6-compat

# Stage 1: Dependencies builder
FROM base AS deps

WORKDIR /app

# Copy package files for better caching
COPY package*.json ./
COPY yarn.lock* ./

# Install dependencies with optimizations
RUN npm ci --only=production --cache=/tmp/npm-cache \
    && npm cache clean --force

# Stage 2: Development dependencies
FROM base AS dev-deps

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install all dependencies including dev dependencies
RUN npm ci --cache=/tmp/npm-cache \
    && npm cache clean --force

# Stage 3: Builder
FROM base AS builder

WORKDIR /app

# Copy dependencies from previous stages
COPY --from=deps /app/node_modules ./node_modules
COPY --from=dev-deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Set build environment
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1

# Build the application with optimizations
RUN npm run build

# Stage 4: Production runtime
FROM base AS runner

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Set proper permissions
RUN chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set environment variables
ENV PORT=3000 \
    HOSTNAME="0.0.0.0" \
    NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Start the application
CMD ["node", "server.js"]

# Stage 5: Development runtime (optional)
FROM base AS development

WORKDIR /app

# Copy dependencies
COPY --from=dev-deps /app/node_modules ./node_modules

# Copy source code
COPY . .

# Expose port
EXPOSE 3000

# Development command with hot reload
CMD ["npm", "run", "dev"] 