# ==============================================================================
# FlightIO Unified Multi-Stage Dockerfile
# Single Dockerfile for all services with optimized caching and minimal layers
# ==============================================================================

# Build Arguments
ARG PYTHON_VERSION=3.11-slim
ARG NODE_VERSION=20-alpine
ARG BUILDKIT_INLINE_CACHE=1

# ==============================================================================
# Stage 1: Python Base with all dependencies
# ==============================================================================
FROM python:${PYTHON_VERSION} AS python-base

# Install system dependencies once
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    libpq-dev \
    libxml2-dev \
    libxslt1-dev \
    libssl-dev \
    libffi-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy and install all Python dependencies at once
COPY requirements.unified.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.unified.txt

# ==============================================================================
# Stage 2: Frontend Builder
# ==============================================================================
FROM node:${NODE_VERSION} AS frontend-builder

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --cache=/tmp/npm-cache

# Copy frontend source
COPY frontend/ ./

# Build frontend
RUN npm run build

# ==============================================================================
# Stage 3: Runtime Base
# ==============================================================================
FROM python:${PYTHON_VERSION} AS runtime-base

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    ca-certificates \
    dumb-init \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -r -u 1000 -g appuser -s /bin/false appuser

# ==============================================================================
# Stage 4: Unified Application
# ==============================================================================
FROM runtime-base AS app

WORKDIR /app

# Copy Python packages from builder
COPY --from=python-base /usr/local/lib/python*/site-packages /usr/local/lib/python*/site-packages
COPY --from=python-base /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=appuser:appuser . ./

# Copy frontend build
COPY --from=frontend-builder --chown=appuser:appuser /app/build ./frontend/build

# Create necessary directories
RUN mkdir -p logs data/storage tmp && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Switch to non-root user
USER appuser

# Set Python path
ENV PYTHONPATH=/app \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Default command (can be overridden)
CMD ["python", "main.py"] 