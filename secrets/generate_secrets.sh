#!/bin/bash

# Secure secrets generation script for FlightIO Crawler
# This script generates cryptographically secure secrets for production use

set -euo pipefail

SECRETS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPT_NAME="$(basename "${BASH_SOURCE[0]}")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to generate a secure random password
generate_password() {
    local length=${1:-32}
    openssl rand -base64 $length | tr -d "=+/" | cut -c1-$length
}

# Function to generate a secure JWT secret
generate_jwt_secret() {
    openssl rand -base64 64 | tr -d "=+/" | cut -c1-64
}

# Function to generate a secure API key
generate_api_key() {
    echo "flightio_$(openssl rand -hex 32)"
}

# Function to check if secrets already exist
check_existing_secrets() {
    local existing_files=()
    
    if [[ -f "${SECRETS_DIR}/db_password.txt" ]]; then
        existing_files+=("db_password.txt")
    fi
    
    if [[ -f "${SECRETS_DIR}/redis_password.txt" ]]; then
        existing_files+=("redis_password.txt")
    fi
    
    if [[ -f "${SECRETS_DIR}/secret_key.txt" ]]; then
        existing_files+=("secret_key.txt")
    fi
    
    if [[ -f "${SECRETS_DIR}/jwt_secret.txt" ]]; then
        existing_files+=("jwt_secret.txt")
    fi
    
    if [[ ${#existing_files[@]} -gt 0 ]]; then
        log_warn "The following secret files already exist:"
        for file in "${existing_files[@]}"; do
            echo "  - $file"
        done
        
        echo
        read -p "Do you want to overwrite existing secrets? (y/N): " -n 1 -r
        echo
        
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "Keeping existing secrets. Exiting..."
            exit 0
        fi
    fi
}

# Function to create a secret file with proper permissions
create_secret_file() {
    local filename="$1"
    local content="$2"
    local filepath="${SECRETS_DIR}/${filename}"
    
    echo -n "$content" > "$filepath"
    chmod 600 "$filepath"
    
    log_info "Created secret file: $filename"
}

# Function to create .env file with references to secrets
create_env_file() {
    local env_file="${SECRETS_DIR}/../.env.docker"
    
    cat > "$env_file" << 'EOF'
# FlightIO Crawler Docker Environment
# Generated by generate_secrets.sh

# Database Configuration
DB_HOST=postgres
DB_NAME=flight_data
DB_USER=crawler
DB_PASSWORD_FILE=/run/secrets/db_password
DB_PORT=5432

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD_FILE=/run/secrets/redis_password
REDIS_DB=0

# Security Configuration
SECRET_KEY_FILE=/run/secrets/secret_key
JWT_SECRET_FILE=/run/secrets/jwt_secret
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Application Configuration
ENVIRONMENT=production
DEBUG_MODE=false
LOG_LEVEL=INFO

# Security Headers
SECURITY_HEADERS=true
RATE_LIMITING=true
CORS_ORIGINS=https://flightio.com,https://app.flightio.com

# Crawler Configuration
CRAWLER_TIMEOUT=30
CRAWLER_CONCURRENCY=3
CRAWLER_RETRY_ATTEMPTS=3
BROWSER_SANDBOX=false
BROWSER_HEADLESS=true

# Monitoring Configuration
PROMETHEUS_URL=http://prometheus:9090
GRAFANA_URL=http://grafana:3000

# Nginx Configuration
NGINX_WORKER_PROCESSES=auto
NGINX_WORKER_CONNECTIONS=1024
EOF

    chmod 600 "$env_file"
    log_info "Created Docker environment file: .env.docker"
}

# Function to create a summary of generated secrets
create_secrets_summary() {
    local summary_file="${SECRETS_DIR}/secrets_summary.txt"
    
    cat > "$summary_file" << EOF
FlightIO Crawler Secrets Summary
Generated on: $(date)
Generated by: $SCRIPT_NAME

Security Information:
- All secrets are randomly generated using OpenSSL
- Database password: 32 characters, alphanumeric
- Redis password: 32 characters, alphanumeric
- Secret key: 64 characters, base64 encoded
- JWT secret: 64 characters, base64 encoded

File Permissions:
- All secret files: 600 (owner read/write only)
- Environment file: 600 (owner read/write only)
- This summary: 600 (owner read/write only)

Usage:
- Use docker-compose up with the updated configuration
- Secrets are automatically mounted as files in containers
- Never commit these files to version control

Security Notes:
- Keep these files secure and backed up
- Rotate secrets regularly in production
- Use different secrets for different environments
- Monitor access to these files
EOF

    chmod 600 "$summary_file"
    log_info "Created secrets summary: secrets_summary.txt"
}

# Main function
main() {
    log_info "Starting FlightIO Crawler secrets generation..."
    
    # Check if OpenSSL is available
    if ! command -v openssl &> /dev/null; then
        log_error "OpenSSL is required but not installed. Please install OpenSSL."
        exit 1
    fi
    
    # Check for existing secrets
    check_existing_secrets
    
    # Generate secrets
    log_info "Generating secure secrets..."
    
    # Database password
    DB_PASSWORD=$(generate_password 32)
    create_secret_file "db_password.txt" "$DB_PASSWORD"
    
    # Redis password
    REDIS_PASSWORD=$(generate_password 32)
    create_secret_file "redis_password.txt" "$REDIS_PASSWORD"
    
    # Application secret key
    SECRET_KEY=$(generate_jwt_secret)
    create_secret_file "secret_key.txt" "$SECRET_KEY"
    
    # JWT secret
    JWT_SECRET=$(generate_jwt_secret)
    create_secret_file "jwt_secret.txt" "$JWT_SECRET"
    
    # Create environment file
    create_env_file
    
    # Create summary
    create_secrets_summary
    
    log_info "All secrets generated successfully!"
    log_info "Files created in: $SECRETS_DIR"
    
    echo
    log_warn "IMPORTANT SECURITY REMINDERS:"
    echo "1. Never commit these files to version control"
    echo "2. Keep these files secure and backed up"
    echo "3. Use different secrets for different environments"
    echo "4. Rotate secrets regularly in production"
    echo "5. Monitor access to these files"
    
    echo
    log_info "Next steps:"
    echo "1. Review the generated .env.docker file"
    echo "2. Run: docker-compose up -d"
    echo "3. Monitor logs for any issues"
}

# Run main function
main "$@" 